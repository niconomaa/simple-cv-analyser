{
  "name": "crisper",
  "version": "2.0.2",
  "description": "Make an HTML file with inline scripts CSP compliant",
  "main": "index.js",
  "bin": {
    "crisper": "bin/crisper"
  },
  "scripts": {
    "test": "jshint --verbose bin/crisper index.js test/test.js && mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/PolymerLabs/crisper.git"
  },
  "author": {
    "name": "The Polymer Authors"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/PolymerLabs/crisper/issues"
  },
  "homepage": "https://github.com/PolymerLabs/crisper",
  "dependencies": {
    "command-line-args": "^2.0.2",
    "dom5": "^1.0.1"
  },
  "devDependencies": {
    "chai": "^3.4.0",
    "jshint": "^2.6.3",
    "mocha": "^2.2.3"
  },
  "readme": "# Crisper\n> Split inline scripts from an HTML file for CSP compliance\n\n## Usage\n\nCommand line usage:\n\n```\ncat index.html | crisper -h build.html -j build.js\ncrisper --source index.html --html build.html --js build.js\ncrisper --html build.html --js build.js index.html\n```\n\nThe output html file will load the output js file at the top of `<head>` with a `<script defer>` element.\n\nOptional Flags:\n\n  - `--script-in-head=false`\n    - In the output HTML file, place the script at the end of `<body>`\n    - **Note**: Only use this if you need `document.write` support.\n  - `--only-split`\n    - Do not write include a `<script>` tag in the output HTML\n      file.\n  - `--always-write-script`\n    - Always create a .js file, even without any `<script>`\n      elements.\n  - `-v` | `--version`\n    - Prints version number.\n\nLibrary usage:\n\n```js\nvar output = crisper({\n  source: 'source HTML string',\n  jsFileName: 'output js file name.js',\n  scriptInHead: true, //default true\n  onlySplit: false, // default false\n  alwaysWriteScript: false // default false\n});\nfs.writeFile(htmlOutputFileName, output.html, 'utf-8', ...);\nfs.writeFile(jsOutputFileName, output.js, 'utf-8', ...);\n```\n\n## Usage with Vulcanize\n\nWhen using [vulcanize](https://github.com/Polymer/vulcanize), crisper can handle\nthe html string output directly and write the CSP seperated files on the command\nline\n\n```\nvulcanize index.html --inline-script | crisper --html build.html --js build.js\n```\n\nOr programmatically\n\n```js\nvulcanize.process('index.html', function(err, cb) {\n  if (err) {\n    return cb(err);\n  } else {\n    var out = crisper({\n      source: html,\n      jsFileName: 'name of js file.js',\n      scriptInHead: true, // default true\n      onlySplit: false, // default false\n      alwaysWriteScript: false //default false\n    })\n    cb(null, out.html, out.js);\n  }\n});\n```\n\n## Breaking Changes from 1.x\n- Deprecated `split` API was removed\n  - `require('crisper').split()`\n- Default value of `script-in-head` flag changed to true\n  - This improves load performance by parallelizing HTML and script parsing\n  - This will break `document.write` calls\n  - If you experience problems, you can use `--script-in-head=false` argument or\n      `scriptInHead: false` in library usage.\n\n## Build Tools\n\n- [gulp-crisper](https://npmjs.com/package/gulp-crisper)\n- [grunt-crisper](https://www.npmjs.com/package/grunt-crisper)\n",
  "readmeFilename": "README.md",
  "_id": "crisper@2.0.2",
  "_from": "crisper@"
}
